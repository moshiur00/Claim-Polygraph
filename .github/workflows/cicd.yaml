name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

concurrency:
  group: claim-polygraph-deploy
  cancel-in-progress: true

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }} # e.g. "claim-polygraph"
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted

    steps:
      - name: Checkout (for reference only)
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest image
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest
        run: |
          echo "Pulling $IMAGE"
          docker pull "$IMAGE"

      - name: Stop & remove old container if it exists
        run: |
          CONTAINER=claim-polygraph
          if [ "$(docker ps -aq -f name=^${CONTAINER}$)" ]; then
            echo "Stopping/removing existing container: $CONTAINER"
            docker stop "$CONTAINER" || true
            docker rm "$CONTAINER" || true
          else
            echo "No existing container named $CONTAINER"
          fi

      - name: Run container
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest
        run: |
          docker run -d \
            --name claim-polygraph \
            --restart=always \
            -p 8080:8080 \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -e SERPAPI_API_KEY="${{ secrets.SERPAPI_API_KEY }}" \
            -e FACT_CHECK_API_KEY="${{ secrets.FACT_CHECK_API_KEY }}" \
            -e CLAIMBUSTER_API_KEY="${{ secrets.CLAIMBUSTER_API_KEY }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            "$IMAGE"

      - name: Verify container is up
        run: |
          docker ps --filter "name=claim-polygraph"
          # show last 50 logs lines to help diagnose startup issues
          docker logs claim-polygraph --tail=50 || true

      - name: Prune old images (optional)
        run: docker image prune -f || true
